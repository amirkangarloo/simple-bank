// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: entity.sql

package db

import (
	"context"
)

const createEntity = `-- name: CreateEntity :one
INSERT INTO
    entries (account_id, amount)
VALUES ($1, $2)
RETURNING
    id, created_at, account_id, amount
`

type CreateEntityParams struct {
	AccountID int64 `json:"account_id"`
	Amount    int64 `json:"amount"`
}

func (q *Queries) CreateEntity(ctx context.Context, arg CreateEntityParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntity, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.AccountID,
		&i.Amount,
	)
	return i, err
}

const getEntity = `-- name: GetEntity :one
SELECT id, created_at, account_id, amount FROM entries WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntity(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntity, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.AccountID,
		&i.Amount,
	)
	return i, err
}

const listEntities = `-- name: ListEntities :many
SELECT id, created_at, account_id, amount
FROM entries
WHERE
    account_id = $1
ORDER BY id
LIMIT $2
OFFSET
    $3
`

type ListEntitiesParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListEntities(ctx context.Context, arg ListEntitiesParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntities, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.AccountID,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
